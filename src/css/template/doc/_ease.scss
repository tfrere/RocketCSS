// Grid
$block-size: 100px;
$nb-col: 4;
$size-of-cell: $block-size / $nb-col;
$size-of-circle: 10px;
$grid-color:color("grey","lighten-3");
$ball-color:color("primary","base");
$underline-color:color("primary","base");
$curve-color:color("grey","base");
$curve-dot-density: 30;
$svg-dot-color:color("primary","base");

#ease {
  display: block;
  position: relative;
  &:after {
    @include clearfix();
  }
}

.ease-demo {
  display: inline-block;
  margin: 6em 6em 1rem 0rem;
  //float: left;
}


.ease-block {
  display: inline-block;
  width: $block-size;
  height: $block-size;
  //margin: 6em 6em 1rem 0rem;
  position: relative;
  overflow: hidden;

  // THE DOT
  // ================================================

  .dot-wrapper {
    border-radius: 0;
    width: $block-size;
    height: $block-size;
    position: absolute;
    bottom:0;
    left:0;
  }

  .dot-square {
    border-radius: 0;
    border-bottom: 2px solid color("complement", "base");
    width: $size-of-cell;
    height: $size-of-cell;
    position: absolute;
    bottom:0;
    left:0;
    z-index: 999;
  }

  .dot-square::after {
    display: none;
  }

  .dot-combined.dot-square::after {
    display: block;
  }
  .dot {
    will-change: transform;
    animation: xAxis 2.5s infinite cubic-bezier(0.02, 0.01, 0.21, 1);
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 999;
  }

  .dot:after {
    content: '';
    display: block;
    will-change: transform;
    width: 20px;
    height: 20px;
    border-radius: 20px;
    background-color: color("complement", "base");
    animation: yAxis 2.5s infinite cubic-bezier(0.3, 0.27, 0.07, 1.64);
  }


  @each $ease_name, $object in $ease {
    .dot-#{$ease_name} {
      animation: xAxis 2.5s infinite $object;
    }
    .dot-#{$ease_name}:after {
      animation: yAxis 2.5s infinite $object;
    }
    @keyframes yAxis {
      50% {
        animation-timing-function: $object;
        transform: translateY(-($block-size - $size-of-cell));
      }
    }

    @keyframes xAxis {
      50% {
        animation-timing-function: $object;
        transform: translateX($block-size - $size-of-cell);
      }
    }
  }

  .dot-final::after {
    animation: none;
  }

  // THE GRID
  // ================================================

  .grid-wrapper {
    height: $block-size;
    width: $block-size;
    position: relative;
    display: inline-block;
  }

  .grid {
    overflow: hidden;
    border-left: 1px solid rgba(0,0,0,0.1);
    border-right: 1px solid rgba(0,0,0,0.1);
    border-top: 1px solid rgba(0,0,0,0.1);
    border-bottom: 1px solid rgba(0,0,0,0.1);
    height: 100%;
    width: 100%;
    position: relative;
  }
  .line {
    width: 100%;
    height: 1px;
    border-left:1px dashed black;
    background-color: rgba(0,0,0,0.1);
    position: absolute;
    left:0;
    @for $i from 1 through $nb-col {
      &:nth-of-type(#{$i}) {
        top: $size-of-cell * $i - $i * 1px;
      }
    }
  }
  .vertical-line {
    width: 1px;
    border-bottom:1px dashed black;
    height: 100%;
    background-color: rgba(0,0,0,0.1);
    position: absolute;
    top:0;
    @for $y from $nb-col through $nb-col * 2 {
      &:nth-of-type(#{$y}) {
        left: $size-of-cell * $y - ($nb-col - 1) * $size-of-cell;
      }
    }
  }

}


@each $ease_name, $object in $ease {
  $tmp: str-slice($object, 14, str-length($object) - 1);
  $test: str-explode(#{$tmp},',');
  .ease-demo-#{$ease_name}.ease-block {
    $x1: to-number(str-trim(nth($test, 1)));
    $y1: to-number(str-trim(nth($test, 2)));
    $x2: to-number(str-trim(nth($test, 3)));
    $y2: to-number(str-trim(nth($test, 4)));
    .svg-dots, .svg-lines {
      position: absolute;
      top:0;
      left:0;
      right:0;
      bottom:0;
      &::before, &::after {
        content: '';
        position: absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        width: $size-of-circle;
        height: $size-of-circle;
        border-radius: 100%;
        z-index: 999;
      }
    }
    .svg-dots {
      // &::after {
      //   content: '';
      //   @include bezier-shadow((
      //     0 $size,
      //     (nth($args, 1) * $size) ((1 - nth($args, 2)) * $size),
      //     (nth($args, 3) * $size) ((1 - nth($args, 4)) * $size),
      //     $size 0
      //   ), map-get($conf, 'detail'));
      // }
      &::before {
        box-shadow:
        0 $block-size 0 0 $svg-dot-color,
        $block-size 0 0 0 $svg-dot-color,
        ($block-size * $x1) $block-size - ($block-size * $y1) 0 0 $svg-dot-color,
        ($block-size * $x2) $block-size - ($block-size * $y2) 0 0 $svg-dot-color;
      }
    }
    .svg-lines {
      // the bottom dot
      &::before {
          width:  $x1 * 100%;
          // 1px bug fixe
          @if ($y1 * 100% != 0) {
            height: $y1 * 100%;
          }
          @else {
            height: 1px;
          }
          background: linear-gradient(
          if($x1 == 1, 90deg, 0 - atan($y1 / $x1) * 1rad),
          transparent calc(50% - 1px),
          $svg-dot-color calc(50% - 1px),
          $svg-dot-color calc(50% + 1px),
          transparent calc(50% + 1px)
        );
      }

      // the top dot
      &::after {
        $v: abs($x2 * 100 - 100);
        $w: abs($y2 * 100 - 100);
        width:  if($v == 0, 1px, $v * 1%);
        height: if($w == 0, 1px, $w * 1%);
        background: linear-gradient(
          if($x2 == 1, 90deg, 0 - atan(($y2 - 1) / ($x2 - 1)) * 1rad),
          transparent calc(50% - 1px),
          $svg-dot-color calc(50% - 1px),
          $svg-dot-color calc(50% + 1px),
          transparent calc(50% + 1px)
        );
      }

    }

  }
}




@each $ease_name, $object in $ease {
  $tmp: str-slice($object, 14, str-length($object) - 1);
  $test: str-explode(#{$tmp},',');
  .ease-demo-#{$ease_name}:not(.ease-block) {
    $str-1: to-number(str-trim(nth($test, 1)));
    $str-2: to-number(str-trim(nth($test, 2)));
    $str-3: to-number(str-trim(nth($test, 3)));
    $str-4: to-number(str-trim(nth($test, 4)));
    @debug $str-1 $str-2 $str-3 $str-4;
    @include cubic-bezier($str-1, $str-2, $str-3, $str-4, (
      'name': #{$ease_name}
    ));
  }
}
